write.csv(calc,"../results/PP_Results.csv")
6 / 3
########### Calculations ########
Ratio<-data.frame((MyDF$Prey.mass[MyDF$Type.of.feeding.interaction] / MyDF$Predator.mass[MyDF$Type.of.feeding.interaction]), MyDF$Type.of.feeding.interaction)
colnames(Ratio)
names(Ratio)[names(Ratio) == "X.MyDF.Prey.mass.MyDF.Predator.mass."] <- "Size.Ratio"
########### Calculations ########
Ratio<-data.frame((MyDF$Prey.mass[MyDF$Type.of.feeding.interaction] / MyDF$Predator.mass[MyDF$Type.of.feeding.interaction]), MyDF$Type.of.feeding.interaction)
colnames(Ratio)
head(Ratio)
########### Calculations ########
Ratio<-data.frame((MyDF$Prey.mass / MyDF$Predator.mass), MyDF$Type.of.feeding.interaction)
head(Ratio)
head(MyDF)
########### Calculations ########
Ratio<-data.frame((MyDF$Prey.mass / MyDF$Predator.mass), MyDF$Type.of.feeding.interaction)
head(Ratio)
########### Calculations ########
Ratio<-data.frame((MyDF$Prey.mass / MyDF$Predator.mass), MyDF$Type.of.feeding.interaction)
colnames(Ratio)
names(Ratio)[names(Ratio) == "X.MyDF.Prey.mass.MyDF.Predator.mass."] <- "Size.Ratio"
names(Ratio)[names(Ratio) == "MyDF.Type.of.feeding.interaction"] <-"Type.of.feeding.interaction"
head(Ratio)
Predator.Prey.Size.Ratios.mean<-tapply(log10(Ratio$Size.Ratio),Ratio$Type.of.feeding.interaction,mean)
Predator.Prey.Size.Ratios.mean
hist(log10(Ratio$Size.Ratio[Ratio$Type.of.feeding.interaction=="insectivorous"]), xlab = "log10 (Size ratio of prey mass over predator mass (g))", ylab = "insectivorous", main ="")
hist(log10(Ratio$Size.Ratio[Ratio$Type.of.feeding.interaction=="piscivorous"]), xlab = "log10 (Size ratio of prey mass over predator mass (g))", ylab = "piscivorous", main ="")
hist(log10(Ratio$Size.Ratio[Ratio$Type.of.feeding.interaction=="planktivorous"]), ylab = "planktivorous", main ="")
hist(log10(Ratio$Size.Ratio[Ratio$Type.of.feeding.interaction=="predacious"]), ylab = "predacious", main ="")
pdf("../results/SizeRatio_Subplots.pdf", 11.7, 8.3)# Open blank pdf page using a relative path
par(mfrow=c(3,2))
hist(log10(Ratio$Size.Ratio[Ratio$Type.of.feeding.interaction=="insectivorous"]), xlab = "log10 (Size ratio of prey mass over predator mass (g))", ylab = "insectivorous", main ="")
hist(log10(Ratio$Size.Ratio[Ratio$Type.of.feeding.interaction=="piscivorous"]), xlab = "log10 (Size ratio of prey mass over predator mass (g))", ylab = "piscivorous", main ="")
hist(log10(Ratio$Size.Ratio[Ratio$Type.of.feeding.interaction=="planktivorous"]), ylab = "planktivorous", main ="")
hist(log10(Ratio$Size.Ratio[Ratio$Type.of.feeding.interaction=="predacious"]), ylab = "predacious", main ="")
hist(log10(Ratio$Size.Ratio[Ratio$Type.of.feeding.interaction=="predacious/piscivorous"]), ylab = "predacious/piscivorous", main ="")
mtext("Types of feeding interaction and Size ratios of prey mass over predator mass (g)",side = 3,line = - 2,outer = TRUE)
graphics.off();
hist(log10(Ratio$Size.Ratio[Ratio$Type.of.feeding.interaction=="planktivorous"]), ylab = "planktivorous", main ="")
source ("PP_Dists.R")
pdf("../results/SizeRatio_Subplots.pdf", 11.7, 8.3)# Open blank pdf page using a relative path
par(mfrow=c(3,2))
hist(log10(Ratio$Size.Ratio[Ratio$Type.of.feeding.interaction=="insectivorous"]), xlab = "log10 (Size ratio of prey mass over predator mass (g))", ylab = "insectivorous", main ="")
hist(log10(Ratio$Size.Ratio[Ratio$Type.of.feeding.interaction=="piscivorous"]), xlab = "log10 (Size ratio of prey mass over predator mass (g))", ylab = "piscivorous", main ="")
hist(log10(Ratio$Size.Ratio[Ratio$Type.of.feeding.interaction=="planktivorous"]), xlab = "log10 (Size ratio of prey mass over predator mass (g))", ylab = "planktivorous", main ="")
hist(log10(Ratio$Size.Ratio[Ratio$Type.of.feeding.interaction=="predacious"]), xlab = "log10 (Size ratio of prey mass over predator mass (g))", ylab = "predacious", main ="")
hist(log10(Ratio$Size.Ratio[Ratio$Type.of.feeding.interaction=="predacious/piscivorous"]), xlab = "log10 (Size ratio of prey mass over predator mass (g))", ylab = "predacious/piscivorous", main ="")
mtext("Types of feeding interaction and Size ratios of prey mass over predator mass (g)",side = 3,line = - 2,outer = TRUE)
graphics.off();
pdf("../results/Prey_Subplots.pdf",11.7, 8.3) # Open blank pdf page using a relative path  # These numbers are page dimensions in inches
par(mfrow=c(3,2)) #initialize multi-paneled plot # specify which sub-plot to use first
hist(log10(MyDF$Prey.mass[MyDF$Type.of.feeding.interaction=="insectivorous"]), xlab = "log10 (Prey Mass (g))", ylab = "Insectivorous", main ="")
hist(log10(MyDF$Prey.mass[MyDF$Type.of.feeding.interaction=="piscivorous"]), xlab = "log10 (Prey Mass (g))", ylab = "Piscivorous" , main ="")
hist(log10(MyDF$Prey.mass[MyDF$Type.of.feeding.interaction=="planktivorous"]), xlab = "log10 (Prey Mass (g))", ylab = "Planktivorous" , main ="")
hist(log10(MyDF$Prey.mass[MyDF$Type.of.feeding.interaction=="predacious"]), xlab = "log10 (Prey Mass (g))", ylab = "Predacious" , main ="")
hist(log10(MyDF$Prey.mass[MyDF$Type.of.feeding.interaction=="predacious/piscivorous"]), xlab = "log10 (Prey Mass (g))", ylab = "Predacious/Piscivorous" , main ="")
mtext("Types of feeding interaction and Prey mass (g)",side = 3,line = - 2,outer = TRUE)
graphics.off(); #you can also use dev.off()
MyDF$Predator.mass
mean(MyDF$Predator.mass)
mean(log10MyDF$Predator.mass[MyDF$Type.of.feeding.interaction=="insectivorous"])
mean(log10(MyDF$Predator.mass[MyDF$Type.of.feeding.interaction=="insectivorous"]))
Predator.mean<-tapply(log10(MyDF$Predator.mass),MyDF$Type.of.feeding.interaction,mean)
Predator.mean
calc<-data.frame((log10)Predator.mean,Prey.mean,Predator.Prey.Size.Ratios.mean, Predator.median,Prey.median,Predator.Prey.Size.Ratios.median)
TreeData<-read.csv("../data/trees.csv",header=TRUE)
TreeHeight <- function(degrees, distance){
radians <- degrees * pi/180 #Equation 1
height <- distance * tan(radians) #Main Equation
print(paste("Tree height is:", height))
return(height)
}
#TreeHeight(37,40)
Height<-TreeHeight(TreeData$Angle.degrees,TreeData$Distance.m)
output_tree <- data.frame(TreeData) #Make a new dataframe
output_tree["Tree.Height.m"] <- Height #Create a new column called height
write.csv(output_tree, "../results/TreeHts.csv") #write a new file
rm(list = ls())
stochrick <- function(p0 = runif(1000, .5, 1.5), r = 1.2, K = 1, sigma = 0.2,numyears = 100)
{
#run if = generate 1000 random numbers
N <- matrix(NA, numyears, length(p0))  #initialize empty matrix
N[1, ] <- p0 #In row 1 p0 and all the columns of the empty matrix row is year, column is population
for (pop in 1:length(p0)) { #loop through the populations
for (yr in 2:numyears){ #for each pop, loop through the years
N[yr, pop] <- N[yr-1, pop] * exp(r * (1 - N[yr - 1, pop] / K) + rnorm(1, 0, sigma)) # add one fluctuation from normal distribution
}
}
return(N)
}
print(N)
View(stochrick)
print(N)
rm(list = ls())
stochrick <- function(p0 = runif(1000, .5, 1.5), r = 1.2, K = 1, sigma = 0.2,numyears = 100)
{
#run if = generate 1000 random numbers
N <- matrix(NA, numyears, length(p0))  #initialize empty matrix
N[1, ] <- p0 #In row 1 p0 and all the columns of the empty matrix row is year, column is population
for (pop in 1:length(p0)) { #loop through the populations
for (yr in 2:numyears){ #for each pop, loop through the years
N[yr, pop] <- N[yr-1, pop] * exp(r * (1 - N[yr - 1, pop] / K) + rnorm(1, 0, sigma)) # add one fluctuation from normal distribution
}
}
return(N)
}
print(N)
# Now write another function called stochrickvect that vectorizes the above to
# the extent possible, with improved performance:
stochrick <- function(p0 = runif(1000, .5, 1.5), r = 1.2, K = 1, sigma = 0.2,numyears = 100)
print(N)
#run if = generate 1000 random numbers
N <- matrix(NA, numyears, length(p0))  #initialize empty matrix
rm(list = ls())
stochrick <- function(p0 = runif(1000, .5, 1.5), r = 1.2, K = 1, sigma = 0.2,numyears = 100)
{
#run if = generate 1000 random numbers
N <- matrix(NA, numyears, length(p0))  #initialize empty matrix
N[1, ] <- p0 #In row 1 p0 and all the columns of the empty matrix row is year, column is population
for (pop in 1:length(p0)) { #loop through the populations
for (yr in 2:numyears){ #for each pop, loop through the years
N[yr, pop] <- N[yr-1, pop] * exp(r * (1 - N[yr - 1, pop] / K) + rnorm(1, 0, sigma)) # add one fluctuation from normal distribution
}
}
return(N)
}
#run if = generate 1000 random numbers
N <- matrix(NA, numyears, length(p0))  #initialize empty matrix
stochrick <- function(p0 = runif(1000, .5, 1.5), r = 1.2, K = 1, sigma = 0.2,numyears = 100)
{
#run if = generate 1000 random numbers
N <- matrix(NA, numyears, length(p0))  #initialize empty matrix
N[1, ] <- p0 #In row 1 p0 and all the columns of the empty matrix row is year, column is population
for (pop in 1:length(p0)) { #loop through the populations
for (yr in 2:numyears){ #for each pop, loop through the years
N[yr, pop] <- N[yr-1, pop] * exp(r * (1 - N[yr - 1, pop] / K) + rnorm(1, 0, sigma)) # add one fluctuation from normal distribution
}
}
return(N)
}
stochrick <- function(p0 = runif(1000, .5, 1.5), r = 1.2, K = 1, sigma = 0.2,numyears = 100)
stochrick
source("PP_Dists.R")
load("../data/KeyWestAnnualMeanTemperature.Rdata") #Temperature in KeyWest for the 20th Century
head(ats)
plot(ats)
#Save it as a vector
keywest <- vect
is.vector(Year) #is it a vector
Year<-ats[,1]
Year
is.vector(Year) #Check it is a vector
Temp<-ats[,2]
Temp
is.vector(Temp) #Check it is a vector
#approx correltation of year and temp
approx<-cor(Year,Temp,use="everything",method=c("pearson")) #correlation coefficent
approx
a <- rep(NA,10000) #pre=allocated vector for correlation coefficent
for (i in 1:10000){
a[i] <- cor(Year,sample(Temp,replace=FALSE))
}
print(a)
#histagram of correlation coefficents
hist(a, xlab="Correlation Coefficent", ylab="Frequency", main="Histagram of Matrix", xlim=c(-0.5,0.5),ylim=c(0,2000))
summary(a)
View(ats)
#Calculate what fraction of the random correlation coefficients were greater than the observed one (this is your approximate, asymptotic p-value).
length(a[a>approx]) #number of elements greater than approx in R
rm(list = ls())
stochrick <- function(p0 = runif(1000, .5, 1.5), r = 1.2, K = 1, sigma = 0.2,numyears = 100)
{
N <- matrix(NA, numyears, length(p0))  #initialize empty matrix
N[1, ] <- p0 #In row 1 p0 and all the columns of the empty matrix row is year, column is population
#for (pop in 1:length(p0)) { #loop through the populations
for (yr in 2:numyears){ #for each pop, loop through the years
N[yr, p[0:length(p0)]] <- N[yr-1, p] * exp(r * (1 - N[yr - 1, p] / K) + rnorm(1, 0, sigma)) # add one fluctuation from normal distribution
}
}
return(N)
rm(list = ls())
stochrick <- function(p0 = runif(1000, .5, 1.5), r = 1.2, K = 1, sigma = 0.2,numyears = 100)
{
N <- matrix(NA, numyears, length(p0))  #initialize empty matrix
N[1, ] <- p0 #In row 1 p0 and all the columns of the empty matrix row is year, column is population
#for (pop in 1:length(p0)) { #loop through the populations
for (yr in 2:numyears){ #for each pop, loop through the years
N[yr, p[0:length(p0)]] <- N[yr-1, 0:length(p0)] * exp(r * (1 - N[yr - 1, 0:length(p0)] / K) + rnorm(1, 0, sigma)) # add one fluctuation from normal distribution
}
}
return(N)
rm(list = ls())
stochrick <- function(p0 = runif(1000, .5, 1.5), r = 1.2, K = 1, sigma = 0.2,numyears = 100)
{
#run if = generate 1000 random numbers
N <- matrix(NA, numyears, length(p0))  #initialize empty matrix
N[1, ] <- p0 #In row 1 p0 and all the columns of the empty matrix row is year, column is population
for (pop in 1:length(p0)) { #loop through the populations
for (yr in 2:numyears){ #for each pop, loop through the years
N[yr, pop] <- N[yr-1, pop] * exp(r * (1 - N[yr - 1, pop] / K) + rnorm(1, 0, sigma)) # add one fluctuation from normal distribution
}
}
return(N)
}
View(stochrick)
print(N)
view(stochrick())
rm(list = ls())
stochrick <- function(p0 = runif(1000, .5, 1.5), r = 1.2, K = 1, sigma = 0.2,numyears = 100)
{
N <- matrix(NA, numyears, length(p0))  #initialize empty matrix
N[1, ] <- p0 #In row 1 p0 and all the columns of the empty matrix row is year, column is population
#for (pop in 1:length(p0)) { #loop through the populations
for (yr in 2:numyears){ #for each pop, loop through the years
N[yr, p[1:length(p0)]] <- N[yr-1, pop] * exp(r * (1 - N[yr - 1, pop] / K) + rnorm(1, 0, sigma)) # add one fluctuation from normal distribution
}
}
return(N)
}
rm(list = ls())
stochrick <- function(p0 = runif(1000, .5, 1.5), r = 1.2, K = 1, sigma = 0.2,numyears = 100)
{
N <- matrix(NA, numyears, length(p0))  #initialize empty matrix
N[1, ] <- p0 #In row 1 p0 and all the columns of the empty matrix row is year, column is population
#for (pop in 1:length(p0)) { #loop through the populations
for (yr in 2:numyears){ #for each pop, loop through the years
N[yr, p[1:length(p0)]] <- N[yr-1, pop] * exp(r * (1 - N[yr - 1, pop] / K) + rnorm(1, 0, sigma)) # add one fluctuation from normal distribution
}
}
return(N)
}
rm(list = ls())
stochrick <- function(p0 = runif(1000, .5, 1.5), r = 1.2, K = 1, sigma = 0.2,numyears = 100)
{
N <- matrix(NA, numyears, length(p0))  #initialize empty matrix
N[1, ] <- p0 #In row 1 p0 and all the columns of the empty matrix row is year, column is population
#for (pop in 1:length(p0)) { #loop through the populations
for (yr in 2:numyears){ #for each pop, loop through the years
N[yr, p[1:length(p0)]] <- N[yr-1, pop] * exp(r * (1 - N[yr - 1, pop] / K) + rnorm(1, 0, sigma)) # add one fluctuation from normal distribution
}
}
return(N)
rm(list = ls())
stochrick <- function(p0 = runif(1000, .5, 1.5), r = 1.2, K = 1, sigma = 0.2,numyears = 100)
{
N <- matrix(NA, numyears, length(p0))  #initialize empty matrix
N[1, ] <- p0 #In row 1 p0 and all the columns of the empty matrix row is year, column is population
#for (pop in 1:length(p0)) { #loop through the populations
for (yr in 2:numyears){ #for each pop, loop through the years
N[yr, p[1:length(p0)]] <- N[yr-1, p[1:length(p0)]] * exp(r * (1 - N[yr - 1, p[1:length(p0)]] / K) + rnorm(1, 0, sigma)) # add one fluctuation from normal distribution
}
}
return(N)
rm(list = ls())
stochrick <- function(p0 = runif(1000, .5, 1.5), r = 1.2, K = 1, sigma = 0.2,numyears = 100)
{
N <- matrix(NA, numyears, length(p0))  #initialize empty matrix
N[1, ] <- p0 #In row 1 p0 and all the columns of the empty matrix row is year, column is population
#for (pop in 1:length(p0)) { #loop through the populations
for (yr in 2:numyears){ #for each pop, loop through the years
N[yr, p[1:length(p0)]] <- N[yr-1, p[1:length(p0)]] * exp(r * (1 - N[yr - 1, p[1:length(p0)]] / K) + rnorm(1, 0, sigma)) # add one fluctuation from normal distribution
}
}
return(N)
rm(list = ls())
stochrick <- function(p0 = runif(1000, .5, 1.5), r = 1.2, K = 1, sigma = 0.2,numyears = 100)
{
N <- matrix(NA, numyears, length(p0))  #initialize empty matrix
N[1, ] <- p0 #In row 1 p0 and all the columns of the empty matrix row is year, column is population
#for (pop in 1:length(p0)) { #loop through the populations
for (yr in 2:numyears){ #for each pop, loop through the years
N[yr, p[1:length]] <- N[yr-1, p[1:length]] * exp(r * (1 - N[yr - 1, p[1:length]] / K) + rnorm(1, 0, sigma)) # add one fluctuation from normal distribution
}
}
return(N)
rm(list = ls())
stochrick <- function(p0 = runif(1000, .5, 1.5), r = 1.2, K = 1, sigma = 0.2,numyears = 100)
{
N <- matrix(NA, numyears, length(p0))  #initialize empty matrix
N[1, ] <- p0 #In row 1 p0 and all the columns of the empty matrix row is year, column is population
#for (pop in 1:length(p0)) { #loop through the populations
for (yr in 2:numyears){ #for each pop, loop through the years
N[yr, (1:length(p0))] <- N[yr-1, (1:length(p0))] * exp(r * (1 - N[yr - 1, (1:length(p0))] / K) + rnorm(1, 0, sigma)) # add one fluctuation from normal distribution
}
}
return(N)
rm(list = ls())
stochrick <- function(p0 = runif(1000, .5, 1.5), r = 1.2, K = 1, sigma = 0.2,numyears = 100)
{
#run if = generate 1000 random numbers
N <- matrix(NA, numyears, length(p0))  #initialize empty matrix
N[1, ] <- p0 #In row 1 p0 and all the columns of the empty matrix row is year, column is population
for (pop in 1:length(p0)) { #loop through the populations
for (yr in 2:numyears){ #for each pop, loop through the years
N[yr, pop] <- N[yr-1, pop] * exp(r * (1 - N[yr - 1, pop] / K) + rnorm(1, 0, sigma)) # add one fluctuation from normal distribution
}
}
return(N)
}
view(stochrick())
rm(list = ls())
stochrick <- function(p0 = runif(1000, .5, 1.5), r = 1.2, K = 1, sigma = 0.2,numyears = 100)
{
N <- matrix(NA, numyears, length(p0))  #initialize empty matrix
N[1, ] <- p0 #In row 1 p0 and all the columns of the empty matrix row is year, column is population
for (yr in 2:numyears){ #for each pop, loop through the years
N[yr, (1:length(p0))] <- N[yr-1, (1:length(p0))] * exp(r * (1 - N[yr - 1, (1:length(p0))] / K) + rnorm(1, 0, sigma)) # add one fluctuation from normal distribution
}
}
return(N)
rm(list = ls())
stochrick <- function(p0 = runif(1000, .5, 1.5), r = 1.2, K = 1, sigma = 0.2,numyears = 100)
{
N <- matrix(NA, numyears, length(p0))  #initialize empty matrix
N[1, ] <- p0 #In row 1 p0 and all the columns of the empty matrix row is year, column is population
for (yr in 2:numyears){ #for each pop, loop through the years
N[yr, (1:length(p0))] <- N[yr-1, (1:length(p0))] * exp(r * (1 - N[yr - 1, (1:length(p0))] / K) + rnorm(1, 0, sigma)) # add one fluctuation from normal distribution
}
}
view(stochrick())
# Now write another function called stochrickvect that vectorizes the above to
# the extent possible, with improved performance:
rm(list = ls())
stochrick <- function(p0 = runif(1000, .5, 1.5), r = 1.2, K = 1, sigma = 0.2,numyears = 100)
{
N <- matrix(NA, numyears, length(p0))  #initialize empty matrix
N[1, ] <- p0 #In row 1 p0 and all the columns of the empty matrix row is year, column is population
for (yr in 2:numyears){ #for each pop, loop through the years
N[yr, (1:length(p0))] <- N[yr-1, (1:length(p0))] * exp(r * (1 - N[yr - 1, (1:length(p0))] / K) + rnorm(1, 0, sigma)) # add one fluctuation from normal distribution
}
}
return(N)
stochrick <- function(p0 = runif(1000, .5, 1.5), r = 1.2, K = 1, sigma = 0.2,numyears = 100)
{
N <- matrix(NA, numyears, length(p0))  #initialize empty matrix
N[1, ] <- p0 #In row 1 p0 and all the columns of the empty matrix row is year, column is population
for (yr in 2:numyears){ #for each pop, loop through the years
N[yr, (1:length(p0))] <- N[yr-1, (1:length(p0))] * exp(r * (1 - N[yr - 1, (1:length(p0))] / K) + rnorm(1, 0, sigma)) # add one fluctuation from normal distribution
}
return(N)
}
rm(list = ls())
stochrick <- function(p0 = runif(1000, .5, 1.5), r = 1.2, K = 1, sigma = 0.2,numyears = 100)
{
N <- matrix(NA, numyears, length(p0))  #initialize empty matrix
N[1, ] <- p0 #In row 1 p0 and all the columns of the empty matrix row is year, column is population
for (yr in 2:numyears){ #for each pop, loop through the years
N[yr, (1:length(p0))] <- N[yr-1, (1:length(p0))] * exp(r * (1 - N[yr - 1, (1:length(p0))] / K) + rnorm(1, 0, sigma)) # add one fluctuation from normal distribution
}
return(N)
}
view(stochrick())
# Runs the stochastic Ricker equation with gaussian fluctuations (thermal fluctuations)
rm(list = ls())
stochrick <- function(p0 = runif(1000, .5, 1.5), r = 1.2, K = 1, sigma = 0.2,numyears = 100)
{
#run if = generate 1000 random numbers
N <- matrix(NA, numyears, length(p0))  #initialize empty matrix
N[1, ] <- p0 #In row 1 p0 and all the columns of the empty matrix row is year, column is population
for (pop in 1:length(p0)) { #loop through the populations
for (yr in 2:numyears){ #for each pop, loop through the years
N[yr, pop] <- N[yr-1, pop] * exp(r * (1 - N[yr - 1, pop] / K) + rnorm(1, 0, sigma)) # add one fluctuation from normal distribution
}
}
return(N)
}
view(stochrick())
rm(list = ls())
stochrick1 <- function(p0 = runif(1000, .5, 1.5), r = 1.2, K = 1, sigma = 0.2,numyears = 100)
{
N <- matrix(NA, numyears, length(p0))  #initialize empty matrix
N[1, ] <- p0 #In row 1 p0 and all the columns of the empty matrix row is year, column is population
for (yr in 2:numyears){ #for each pop, loop through the years
N[yr, (1:length(p0))] <- N[yr-1, (1:length(p0))] * exp(r * (1 - N[yr - 1, (1:length(p0))] / K) + rnorm(1, 0, sigma)) # add one fluctuation from normal distribution
}
return(N)
}
view(stochrick1())
approx
#Are temperatures of one year significantly correlated with the next year
#(successive years), across years in a given location?
load("../data/KeyWestAnnualMeanTemperature.Rdata") #Temperature in KeyWest for the 20th Century
head(ats)
plot(ats)
#Save it as a vector
keywest <- vect
is.vector(Year) #is it a vector
Year<-ats[,1]
Year
is.vector(Year) #Check it is a vector
Temp<-ats[,2]
Temp
is.vector(Temp) #Check it is a vector
#approx correltation of year and temp
approx<-cor(Year,Temp,use="everything",method=c("pearson")) #correlation coefficent
approx
summary(a)
#Are temperatures of one year significantly correlated with the next year
#(successive years), across years in a given location?
load("../data/KeyWestAnnualMeanTemperature.Rdata") #Temperature in KeyWest for the 20th Century
head(ats)
plot(ats)
#Save it as a vector
keywest <- vect
is.vector(Year) #is it a vector
Year<-ats[,1]
Year
is.vector(Year) #Check it is a vector
Temp<-ats[,2]
Temp
is.vector(Temp) #Check it is a vector
#approx correltation of year and temp
approx<-cor(Year,Temp,use="everything",method=c("pearson")) #correlation coefficent
approx
#0.5331784 is the approx correlation coefficent
#Shuffle the temp then calculate a correlation coefficent, repeat by 10000
a <- rep(NA,10000) #pre=allocated vector for correlation coefficent
for (i in 1:10000){
a[i] <- cor(Year,sample(Temp,replace=FALSE))
}
print(a)
#histagram of correlation coefficents
hist(a, xlab="Correlation Coefficent", ylab="Frequency", main="Histagram of Matrix", xlim=c(-0.5,0.5),ylim=c(0,2000))
summary(a)
#histagram of correlation coefficents
jpeg("histogram.jpg", width=459,height=360)
hist(a, xlab="Correlation Coefficent", ylab="Frequency", main="Histagram of Matrix", xlim=c(-0.5,0.5),ylim=c(0,2000))
summary(a)
dev.off()
#histagram of correlation coefficents
pdf("histogram.pdf", width=459,height=360)
hist(a, xlab="Correlation Coefficent", ylab="Frequency", main="Histagram of Matrix", xlim=c(-0.5,0.5),ylim=c(0,2000))
summary(a)
dev.off()
#histagram of correlation coefficents
pdf("histogram.pdf", width=459,height=360)
hist(a, xlab="Correlation Coefficent", ylab="Frequency", main="Histagram of Matrix", xlim=c(-0.5,0.5),ylim=c(0,2000))
summary(a)
dev.off()
#histagram of correlation coefficents
pdf("histogram.pdf", width=459,height=360)
hist(a, xlab="Correlation Coefficent", ylab="Frequency", main="Histagram of Matrix", xlim=c(-0.5,0.5),ylim=c(0,2000))
summary(a)
graphics.off()
#histagram of correlation coefficents
pdf("histogram.pdf")
graph<-hist(a, xlab="Correlation Coefficent", ylab="Frequency", main="Histagram of Matrix", xlim=c(-0.5,0.5),ylim=c(0,2000))
print(graphy)
graphics.off()
#histagram of correlation coefficents
pdf("histogram.pdf")
graph<-hist(a, xlab="Correlation Coefficent", ylab="Frequency", main="Histagram of Matrix", xlim=c(-0.5,0.5),ylim=c(0,2000))
print(graph)
graphics.off()
load("../data/KeyWestAnnualMeanTemperature.Rdata") #Temperature in KeyWest for the 20th Century
head(ats)
plot(ats)
pdf(../results/keywest.pdf)
keywest<-plot(ats)
print(keywest)
graphics.off()
pdf("../results/keywest.pdf")
keywest<-plot(ats)
print(keywest)
graphics.off()
load("../data/KeyWestAnnualMeanTemperature.Rdata") #Temperature in KeyWest for the 20th Century
head(ats)
pdf("../results/keywest.pdf")
keywest<-plot(ats)
print(keywest)
graphics.off()
keywest
keywest
keywest<-plot(ats)
print(graph)
graph
graph<-hist(a, xlab="Correlation Coefficent", ylab="Frequency", main="Histagram of Matrix", xlim=c(-0.5,0.5),ylim=c(0,2000))
#Are temperatures of one year significantly correlated with the next year
#(successive years), across years in a given location?
load("../data/KeyWestAnnualMeanTemperature.Rdata") #Temperature in KeyWest for the 20th Century
head(ats)
pdf("../results/keywest.pdf")
keywest<-plot(ats)
print(keywest)
graphics.off()
#Save it as a vector
keywest <- vect
is.vector(Year) #is it a vector
Year<-ats[,1]
Year
is.vector(Year) #Check it is a vector
Temp<-ats[,2]
Temp
is.vector(Temp) #Check it is a vector
#approx correltation of year and temp
approx<-cor(Year,Temp,use="everything",method=c("pearson")) #correlation coefficent
approx
#0.5331784 is the approx correlation coefficent
#Shuffle the temp then calculate a correlation coefficent, repeat by 10000
a <- rep(NA,10000) #pre=allocated vector for correlation coefficent
for (i in 1:10000){
a[i] <- cor(Year,sample(Temp,replace=FALSE))
}
print(a)
#histagram of correlation coefficents
pdf("../results/histogram.pdf")
graph<-hist(a, xlab="Correlation Coefficent", ylab="Frequency", main="Histagram of Matrix", xlim=c(-0.5,0.5),ylim=c(0,2000))
print(graph)
graphics.off()
#Calculate what fraction of the random correlation coefficients were greater than the observed one (this is your approximate, asymptotic p-value).
length(a[a>approx]) #number of elements greater than approx in R
#None are larger than 0
