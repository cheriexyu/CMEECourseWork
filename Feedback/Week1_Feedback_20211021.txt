Starting code feedback for Cherie, Week1

Current Points = 100

Note that: 
(1) Major sections begin with a double "====" line 
(2) Subsections begin with a single "====" line 
(3) Code output or text file content are printed within single "*****" lines 

======================================================================
======================================================================
Your Git repo size this week is about 5.89 MiB on disk 

PART 1: Checking project workflow...

Found the following directories in parent directory: .git, week2, Feedback, week1

Found the following files in parent directory: README.md, .gitignore

Checking for key files in parent directory...

Found .gitignore in parent directory, great! 

Printing contents of .gitignore:

**********************************************************************
*~ 
*.tmp
 
# Gitignore files and directory
*.DS_Store
week1/code/.*
week1/sandbox/*
!week1/sandbox/.gitkeep
week2/sandbox/*
!week2/sandbox/.gitkeep
week3/sandbox/*
!week3/sandbox/.gitkeep
week4/sandbox/*
!week4/sandbox/.gitkeep
week2/code/__*




**********************************************************************

Found README in parent directory, named: README.md

Printing contents of README.md:

**********************************************************************
# *My CMEE Coursework Repository*

## General Description
This repository contains my coursework for the Computational Methods of Ecology and Evolution Course (CMEE) at Imperial College. 

All codes in this project was written and tested in R and Python3. Based on the **The Multilingual Quantitative Biologist** [online book](https://mhasoba.github.io/TheMulQuaBio/intro.html). 

***
## Usage
If you would like to use and download my repository, please *clone* this and move it to your our directory. 

***
## Project Structure 
The repository is organised in week structures. Within each week contains the core directories: 
*code*, *data*, *results*, *sandbox*

    - Week1: Unix/Linux, Bash Shell Scripting and LaTeX
    - Week2: Biological Computing with Python I

***
## Note
Note that these codes are all written on a MacOS, therefore there might be minimal differences in the use of syntax, however in general it would run in any operating systems. 

Author: Cherie Yu
Contact: cyy21@ic.ac.uk
**********************************************************************

======================================================================
Looking for the weekly directories...

Found 2 weekly directories: week1, week2

The Week1 directory will be assessed 

======================================================================
======================================================================
PART 2: Checking weekly code and workflow...

======================================================================
Assessing WEEK1...

Found the following directories: code, sandbox, results, data

Found the following files: README.md

Checking for readme file in weekly directory...

Found README in parent directory, named: README.md

Printing contents of README.md:

**********************************************************************
# *Week 1*


## General Description

In week 1, we underwent practical exercises using UNIX systems to create working bash scripts.

***

## Languages
Unix Shell and Bash Script

***
## Dependencies
imagemagick, LaTeX

***
## Installation

Use the package manager [homebrew] (https://brew.sh/) to install imagemagick and LaTeX.

```bash
brew install imagemagick
```

```bash
brew install --cask MacTeX 
```

***
## Project Structure and Usage

../code

    - UnixPrac1.txt: Unix shell exercise with ../data/fasta FASTA files
    - boilerplate.sh: Simple boilerplate for shell scripts 
    - tabtocsv.sh: Bash script to substitue tabs with commas in files
    - CountLines.sh: Bash script to countlines in files
    - ConcatenateTwoFiles.sh: Bash script to merge two files to a new output
    - tiff2png.sh: Bash script to convert .tiff to .png with imagemagick
    - csvtospace.sh: Bash script to take .CSV and convert to space separated value files in a new output 
    - CompileLaTeX.sh: Bash script to compile a LaTeX .pdf document 


Author: Cherie Yu
Contact: cyy21@ic.ac.uk

**********************************************************************

Results directory is empty - good! 

Found 12 code files: tiff2png.sh, CountLines.sh, FirstBiblio.bib, tabtocsv.sh, variables.sh, FirstExample.tex, boilerplate.sh, csvtospace.sh, ConcatenateTwoFiles.sh, UnixPrac1.txt, CompileLaTeX.sh, MyExampleScript.sh

======================================================================
Testing script/code files...

======================================================================
Inspecting script file tiff2png.sh...

File contents are:

**********************************************************************
#!/bin/bash
#Author: cy221@ic.ac.uk
#Script: tiff2png.sh
#Description: converting all tiff files to png files 
#Arugments: f -> tiff filename 
#Date: Oct 2021

for f in *.tiff; #f is a variable that you identify as the file you want to convert
    do
        echo "Converting $f";  #You specified the variable therefore becoming $f (name of file.tiff)
        convert "$f"  "$(basename "$f" .tiff).png"; #Convert into a png, basename command extracts just the $f without the ending suffix
    done 

mv *.png ../results #need to add a star in front or else it won't work because loop was for all tiff conversion, therefore you have to specify this command to move ALL png

#exit
**********************************************************************

Testing tiff2png.sh...

Output (only first 500 characters): 


**********************************************************************
Converting *.tiff

**********************************************************************

Encountered error (or warning):
convert-im6.q16: unable to open image `*.tiff': No such file or directory @ error/blob.c/OpenBlob/2874.
convert-im6.q16: no images defined `*.png' @ error/convert.c/ConvertImageCommand/3258.
mv: cannot stat '*.png': No such file or directory

======================================================================
Inspecting script file CountLines.sh...

File contents are:

**********************************************************************
#!/bin/bash
#Author: cy221@ic.ac.uk
#Script: CountLines.sh
#Description: use of variables to count lines for shell scripts
#Arugments: 1 -> Input File for counting 
#Date: Oct 2021

if [ $# -eq 0 ]; then 
    echo "Error, Need Input File"
    exit 1
fi

NumLines=`wc -l < $1` 
#Variable 'NumLines' mean count line number of $1, < redirects the content of the files into the command wc -l
#Without < it will also print out the script name
echo "The file $1 has $NumLines lines"
echo
#exit

#You need to specify what $1 since you need to count lines of a file, therefore in terminal you need to read zsh countlines.sh FILENAME

**********************************************************************

Testing CountLines.sh...

Output (only first 500 characters): 


**********************************************************************
Error, Need Input File

**********************************************************************

Code ran without errors

Time consumed = 0.00378s

======================================================================
Inspecting script file FirstBiblio.bib...

File contents are:

**********************************************************************
@article{verhulst1838notice,
  title={Notice sur la loi que la population suit dans son accroissement},
  author={Verhulst, Pierre-Fran{\c{c}}ois},
  journal={Corresp. Math. Phys.},
  volume={10},
  pages={113--126},
  year={1838}
}


**********************************************************************

Testing FirstBiblio.bib...

======================================================================
Inspecting script file tabtocsv.sh...

File contents are:

**********************************************************************
#!/bin/bash
#Author: cy221@ic.ac.uk
#Script: tabtocsv.sh
#Description: substitute the tabs in the files with commas
#
#Saves the output into a .csv file
#Arugments: 1 -> tab delimited file
#Date: Oct 2021

if [ $# -eq 0 ]; then
    echo "No Input File Provided"
    exit 1
fi

echo "Creating a comma delimited version of $1 ..." 
cat $1 | tr -s "\t" "," >> $1.csv #Within a new file called $1.csv, Write down $1, then transform and remove "\t" and ","
mv $1.csv ../results
echo "Done!"
#exit

#In terminal code "echo -e "test \t\t test" >> NEW FILE"
#Output = test , testt
#tr -s [string1] [string2], subsitute many of string 1 with one of string 2 

**********************************************************************

Testing tabtocsv.sh...

Output (only first 500 characters): 


**********************************************************************
No Input File Provided

**********************************************************************

Code ran without errors

Time consumed = 0.00324s

======================================================================
Inspecting script file variables.sh...

File contents are:

**********************************************************************
#!/bin/bash
#Author: cy221@ic.ac.uk
#Script: variables.sh
#Description: Assigning and use of variables for shell scripts
#Arugments: MyVar -> 'string', a and b -> read number provided by reader
#Date: Oct 2021

#Shows the use of variables
MyVar='some string'
echo 'the current value of the variable is' $MyVar #You add dollar sign infront of variable to signify it is a variable 
echo 'Please enter a new string'
read MyVar #Tells audience to give a new string to MyVar and read that 
echo 'the current value of the variable is' $MyVar #Replaces the MyVar in line 4 with the new one from line 7

## Reading multiple values
echo 'Enter two numbers separated by space (s)'
read a b #Tells audience to put a string for a and b, and shell to read it as that
echo 'you entered' $a 'and' $b '. Their sum is:' #Dollar sign means signify it as variable
mysum=`expr $a + $b` #Adding two numbers in Bash and putting it as a variable
echo $mysum

#exit
**********************************************************************

Testing variables.sh...

Output (only first 500 characters): 


**********************************************************************
the current value of the variable is some string
Please enter a new string
the current value of the variable is
Enter two numbers separated by space (s)
you entered and . Their sum is:


**********************************************************************

Encountered error (or warning):
expr: syntax error: missing argument after ‘+’

======================================================================
Inspecting script file FirstExample.tex...

File contents are:

**********************************************************************
\documentclass[12pt]{article}

\title{A Simple Document}

\author{Cherie Yu}

\date{}

\begin{document}
  \maketitle
  
  \begin{abstract}
    This paper analyzes a seminal equation in population biology.
  \end{abstract}
  
  \section{Introduction}
    Blah Blah
  
  \section{Materials \& Methods}
  
  A foundational equation of population biology is:
  
  \begin{equation}
    \frac{dN}{dt} = r N (1 - \frac{N}{K})
  \end{equation}
  
  It was first proposed by Verhulst in 1838 \cite{verhulst1838notice}.
  
  \bibliographystyle{plain}
  
  \bibliography{FirstBiblio}

\end{document} 
**********************************************************************

Testing FirstExample.tex...

======================================================================
Inspecting script file boilerplate.sh...

File contents are:

**********************************************************************
#!/bin/bash
#Author: cy221@ic.ac.uk
#Script: boilerplate.sh
#Description: simple boilerplate for shell scripts
#Arugments: none
#Date: Oct 2021

echo -e "\nThis is a shell script!\n" 
#-e acts as an interpretor to backslash command characters
#\n tells to start from a new line 


#exit


**********************************************************************

Testing boilerplate.sh...

Output (only first 500 characters): 


**********************************************************************

This is a shell script!


**********************************************************************

Code ran without errors

Time consumed = 0.00391s

======================================================================
Inspecting script file csvtospace.sh...

File contents are:

**********************************************************************
#!/bin/bash
#Author: cy221@ic.ac.uk
#Script: boilerplate.sh
#Description: Converts CSV file to space seperated value version without changing the input file
#Arugments: 1 -> CSV file , 2 -> New Output file 
#Date: Oct 2021

if [ $# -eq 0 ]; then #if command to make sure input files are provided: CSV  
    echo "No Input File Provided"
    exit 1
fi

if [ $# -eq 1 ]; then #if command to make sure input files are provided: output filename 
    echo "No Output File Provided"
    exit 1
fi

echo "Creating a space seperated value version of $1"
cat $1 | tr -s "," " " >> $2 #subsituting all comma with one space value
echo "Done!"

mv $2 ../results

#exit

**********************************************************************

Testing csvtospace.sh...

Output (only first 500 characters): 


**********************************************************************
No Input File Provided

**********************************************************************

Code ran without errors

Time consumed = 0.00452s

======================================================================
Inspecting script file ConcatenateTwoFiles.sh...

File contents are:

**********************************************************************
#!/bin/bash
#Author: cy221@ic.ac.uk
#Script: ConcatenateTwoFiles.sh
#Description: combining two files into a new output file 
#Arugments: 1 -> Input File 1, 2 -> Input File 2, 3 -> New Output File 
#Date: Oct 2021

if [ $# -le 2 ]; then #-le means less or equal to 2 
    echo "Error, Need Input Files"
    exit 1
fi

cat $1 > $3 #Write $1 in $3
cat $2 >> $3 #Write $2 in the second line of $3
echo "Merged File is" #First line in terminal with the string "Merged File is"
cat $3 #Show file text of $3
mv $3 ../results

#exit

#Combining and merging two files together, When zsh in terminal need to write 4 subsitutes e.g zsh ConcatenateTwoFiles.sh FILE1($1) FILE2($2) $3.txt

**********************************************************************

Testing ConcatenateTwoFiles.sh...

Output (only first 500 characters): 


**********************************************************************
Error, Need Input Files

**********************************************************************

Code ran without errors

Time consumed = 0.00339s

======================================================================
Inspecting script file UnixPrac1.txt...

File contents are:

**********************************************************************

#1
wc -l ../data/Fasta/407228326.fasta
wc -l ../data/Fasta/407228412.fasta
wc -l ../data/Fasta/E.coli.fasta

#2
tail -n+2 ../data/Fasta/E.coli.fasta

#3
tail -n+2 ../data/Fasta/E.coli.fasta | wc -m

#4
tail -n+2 ../data/Fasta/E.coli.fasta | tr -d '\n\' | grep -i -o ATGC | wc -l 

#5 
myvar=$(grep -i -o 'A\|T' ../data/Fasta/E.coli.fasta | wc -l)
myvar2=$(grep -i -o 'C\|G' ../data/Fasta/E.coli.fasta | wc -l) 
echo $(echo "scale=3; $myvar / $myvar2"  | bc )
**********************************************************************

Testing UnixPrac1.txt...

======================================================================
Inspecting script file CompileLaTeX.sh...

File contents are:

**********************************************************************
#!/bin/bash
#Author: cy221@ic.ac.uk
#Script: CompileLaTeX.sh
#Description: compile LaTeX and bibliography into a pdf 
#Arugments: 1 -> LaTeX File
#Date: Oct 2021

if [ $# -eq 0 ]; then
    echo "No Input LaTex File Provided"
    exit 1
fi

FILE=$1
Var=$(basename "$FILE" | cut -d'.' -f1) #basename takes the filename and print out the last component of the filename or strip the end, cut based on the delimited . and print out the first field
echo "$Var" 
pdflatex $Var.tex #generates two files .log and .aux (and an incomplete .pdf)
bibtex $Var #reads .aux and produce two files .bbl and .blg, bibtex put citation into aux file
pdflatex $Var.tex #run updates on .log and .aux (writes in text on .aux)
pdflatex $Var.tex #updates .log and .aux and produce final .pdf
evince $Var.pdf& #opens pdf
mv $Var.pdf ../results

## Cleanup all extra files 
rm *.aux
rm *.log
rm *.bbl
rm *.blg

#.log only records how commands are runing
**********************************************************************

Testing CompileLaTeX.sh...

Output (only first 500 characters): 


**********************************************************************
No Input LaTex File Provided

**********************************************************************

Code ran without errors

Time consumed = 0.00287s

======================================================================
Inspecting script file MyExampleScript.sh...

File contents are:

**********************************************************************
#!/bin/bash
#Author: cy221@ic.ac.uk
#Script: MyExampleScript.sh
#Description: variable examples for shell scripts
#Arugments: msg1 -> Hello , msg2 -> UserName
#Date: Oct 2021

msg1="Hello"
msg2=$USER
echo "$msg1 $msg2" #Method one to print Hello $User (No need to specifiy $User as shown in computer system)
echo "Hello $USER" #Method two to print Hello $User
echo
#exit
**********************************************************************

Testing MyExampleScript.sh...

Output (only first 500 characters): 


**********************************************************************
Hello mhasoba
Hello mhasoba


**********************************************************************

Code ran without errors

Time consumed = 0.00427s

======================================================================
======================================================================
Finished running scripts

Ran into 2 errors

======================================================================
======================================================================

FINISHED WEEKLY ASSESSMENT

Current Points for the Week = 100

NOTE THAT THESE ARE POINTS, NOT MARKS FOR THE WEEK!